{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "S3BucketName": {
      "Description": "Name of the S3 bucket with your support files",
      "Type": "String"
    },
    "MyExternalIP": {
      "Description": "My external IP address (go to www.whatismyip.com and paste your IP address here)",
      "Type": "String"
    }
  },
  "Resources": {
    "VPCDockerTemplate": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.30.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "false"
      }
    },
    "SubnetDockerTemplate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.30.0.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        }
      }
    },
    "InternetGatewayDockerTemplate": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "DHCPOptsDockerTemplate": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "docker.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "NetworkAclDockerTemplate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        }
      }
    },
    "RouteTableDockerTemplate": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        }
      }
    },
    "EC2InstanceDockerTemplate": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "IamInstanceProfile": "docker-s3-read-role",
        "ImageId": "ami-5189a661",
        "InstanceType": "t2.micro",
        "KeyName": "docker-dtr",
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Docker CS Engine"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "SubnetDockerTemplate"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "172.30.0.214",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgdockerswarmsecuritygroup"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "curl -O https://bootstrap.pypa.io/get-pip.py",
                "python get-pip.py",
                "pip install awscli",
                "mkdir /workspace",
                {
                  "Fn::Join": [
                    "",
                    [
                      "aws s3 cp --recursive s3://",
                      {
                        "Ref": "S3BucketName"
                      },
                      "/ /workspace/ > /workspace/download.log 2>&1"
                    ]
                  ]
                },
                "chmod +x /workspace/*",
                "echo '#!/bin/bash'                                        > /etc/rc.local",
                "echo 'cd /workspace'                                      >> /etc/rc.local",
                "echo 'if [ ! -f linux-image-extra-virtual-sentinel.txt ]' >> /etc/rc.local",
                "echo 'then'                                               >> /etc/rc.local",
                "echo '    apt-get update && apt-get upgrade -y'           >> /etc/rc.local",
                "echo '    apt-get install -y linux-image-extra-virtual'   >> /etc/rc.local",
                "echo '    touch linux-image-extra-virtual-sentinel.txt'   >> /etc/rc.local",
                "echo '    reboot'                                         >> /etc/rc.local",
                "echo 'fi'                                                 >> /etc/rc.local",
                "echo 'if [ ! -f docker-install-sentinel.txt ]'            >> /etc/rc.local",
                "echo 'then'                                               >> /etc/rc.local",
                "echo '  chmod 755 docker-cs-engine-deb.sh'                >> /etc/rc.local",
                "echo '  ./docker-cs-engine-deb.sh'                        >> /etc/rc.local",
                "echo '  apt-get install -y docker-engine-cs'              >> /etc/rc.local",
                "echo '  '                                                 >> /etc/rc.local",
                "echo 'fi'                                                 >> /etc/rc.local",
                "echo 'exit 0'                                             >> /etc/rc.local",
                "#cp /workspace/provision-docker-node.sh /etc/rc.local",
                "/etc/rc.local"
              ]
            ]
          }
        }
      }
    },
    "sgdockerswarmsecuritygroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Docker Swarm autoscaling cluster",
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        }
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "NetworkAclDockerTemplate"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "NetworkAclDockerTemplate"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclDockerTemplate"
        },
        "SubnetId": {
          "Ref": "SubnetDockerTemplate"
        }
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        },
        "InternetGatewayId": {
          "Ref": "InternetGatewayDockerTemplate"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTableDockerTemplate"
        },
        "GatewayId": {
          "Ref": "InternetGatewayDockerTemplate"
        }
      },
      "DependsOn": "gw1"
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPCDockerTemplate"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptsDockerTemplate"
        }
      }
    },
    "MyIPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgdockerswarmsecuritygroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "1",
        "ToPort": "65535",
        "CidrIp": {
        "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "MyExternalIP"
                      },
                      "/32"
                    ]
            ]
        }
      }
    },
    "GithubWebhookIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgdockerswarmsecuritygroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "CidrIp": "192.30.252.0/22"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgdockerswarmsecuritygroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Description": "Docker CS Engine Template"
}